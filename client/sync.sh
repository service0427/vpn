#!/bin/bash

#######################################
# VPN Î™©Î°ù ÎèôÍ∏∞Ìôî (API Í∏∞Î∞ò)
# ÏÇ¨Ïö©Î≤ï: ./sync.sh
#######################################

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }

# Root Í∂åÌïú ÌôïÏù∏
if [ "$EUID" -ne 0 ]; then
    log_error "root Í∂åÌïú ÌïÑÏöî"
    exit 1
fi

# API Ï†ïÎ≥¥
API_HOST="112.161.221.82"

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "${BLUE}üîÑ VPN Î™©Î°ù ÎèôÍ∏∞Ìôî (API)${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# curl, jq ÌôïÏù∏
if ! command -v curl &> /dev/null; then
    log_error "curlÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    log_error "jqÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
    log_info "ÏÑ§Ïπò: dnf install -y jq (Rocky) ÎòêÎäî apt install -y jq (Ubuntu)"
    exit 1
fi

# API Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
log_info "API Ïó∞Í≤∞ Ï§ë: $API_HOST"
if ! curl -s -f http://$API_HOST/health > /dev/null; then
    log_error "API Ïó∞Í≤∞ Ïã§Ìå®"
    exit 1
fi
log_success "API Ïó∞Í≤∞ ÏÑ±Í≥µ"

# VPN Î™©Î°ù Ï°∞Ìöå
log_info "VPN Î™©Î°ù Ï°∞Ìöå Ï§ë..."
VPN_LIST=$(curl -s http://$API_HOST/api/vpn/list)

VPN_COUNT=$(echo "$VPN_LIST" | jq '.vpns | length')

if [ "$VPN_COUNT" -eq 0 ]; then
    log_warn "ÌôúÏÑ± VPNÏù¥ ÏóÜÏäµÎãàÎã§"
    log_info "Î®ºÏ†Ä VPN ÏÑúÎ≤ÑÏóêÏÑú setup.shÎ•º Ïã§ÌñâÌïòÏÑ∏Ïöî"
    exit 0
fi

log_success "Ï¥ù ${VPN_COUNT}Í∞úÏùò ÌôúÏÑ± VPN Î∞úÍ≤¨"

# Í∏∞Ï°¥ VPN ÌôïÏù∏
EXISTING_VPNS=$(wg show interfaces 2>/dev/null || echo "")
if [ ! -z "$EXISTING_VPNS" ]; then
    log_warn "Í∏∞Ï°¥ VPN Ïù∏ÌÑ∞ÌéòÏù¥Ïä§: $EXISTING_VPNS"
    read -p "Í∏∞Ï°¥ VPNÏùÑ Î™®Îëê Ï†úÍ±∞ÌïòÍ≥† Îã§Ïãú ÏÑ§Ï†ïÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "ÎèôÍ∏∞Ìôî Ï∑®ÏÜåÎê®"
        exit 0
    fi

    # Í∏∞Ï°¥ VPN Ï†úÍ±∞
    for iface in $EXISTING_VPNS; do
        log_info "Ï†úÍ±∞ Ï§ë: $iface"
        systemctl stop wg-quick@${iface} 2>/dev/null || true
        systemctl disable wg-quick@${iface} 2>/dev/null || true
        rm -f /etc/wireguard/${iface}.conf
    done
fi

# VPN Ï∂îÍ∞Ä
echo ""
log_info "VPN Ï∂îÍ∞Ä ÏãúÏûë..."

VPN_INDEX=0
echo "$VPN_LIST" | jq -r '.vpns[] | "\(.public_ip)"' | while read -r public_ip; do
    echo ""
    # Í∞ÑÎã®Ìïú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ïù¥Î¶Ñ ÏÇ¨Ïö© (wg0, wg1, wg2, ...)
    INTERFACE="wg${VPN_INDEX}"
    log_info "[$public_ip] ‚Üí $INTERFACE Ï∂îÍ∞Ä Ï§ë..."

    # APIÏóêÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï Îã§Ïö¥Î°úÎìú
    TEMP_FILE="/tmp/vpn-config-${INTERFACE}.conf"

    if ! curl -s -f "http://$API_HOST/api/vpn/$public_ip/config" > "$TEMP_FILE"; then
        log_error "[$public_ip] ÏÑ§Ï†ï Îã§Ïö¥Î°úÎìú Ïã§Ìå®"
        rm -f "$TEMP_FILE"
        VPN_INDEX=$((VPN_INDEX + 1))
        continue
    fi

    if [ ! -s "$TEMP_FILE" ]; then
        log_error "[$public_ip] ÏÑ§Ï†ï ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§"
        rm -f "$TEMP_FILE"
        VPN_INDEX=$((VPN_INDEX + 1))
        continue
    fi

    # ÏÑ§Ï†ï ÌååÏùº Î≥µÏÇ¨ Î∞è ÏàòÏ†ï
    TARGET_CONF="/etc/wireguard/${INTERFACE}.conf"
    cp "$TEMP_FILE" "$TARGET_CONF"
    chmod 600 "$TARGET_CONF"

    # Table = off Ï∂îÍ∞Ä (ÏàòÎèô ÎùºÏö∞ÌåÖ)
    if ! grep -q "Table = off" "$TARGET_CONF"; then
        sed -i '/\[Interface\]/a Table = off' "$TARGET_CONF"
    fi

    # DNS Ï†úÍ±∞ (Rocky Linux 10 Ìò∏ÌôòÏÑ±)
    sed -i '/^DNS/d' "$TARGET_CONF"

    rm -f "$TEMP_FILE"

    # VPN ÏãúÏûë
    systemctl enable wg-quick@${INTERFACE} 2>/dev/null
    systemctl restart wg-quick@${INTERFACE}

    if systemctl is-active --quiet wg-quick@${INTERFACE}; then
        log_success "[$public_ip] ‚Üí $INTERFACE Ï∂îÍ∞Ä ÏôÑÎ£å"

        # ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (ÎπÑÌôúÏÑ± ÏÉÅÌÉú)
        VPN_IP=$(grep "Address" "$TARGET_CONF" | head -n1 | cut -d'=' -f2 | cut -d'/' -f1 | tr -d ' ')
        VPN_GATEWAY=$(echo $VPN_IP | awk -F'.' '{print $1"."$2"."$3".1"}')
        ip route add default via $VPN_GATEWAY dev $INTERFACE metric 900 2>/dev/null || true
    else
        log_error "[$public_ip] ‚Üí $INTERFACE VPN ÏãúÏûë Ïã§Ìå®"
        journalctl -u wg-quick@${INTERFACE} -n 10 --no-pager
    fi

    VPN_INDEX=$((VPN_INDEX + 1))
done

# setup-vpnusers.sh Ïã§Ìñâ
echo ""
log_info "VPN ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï§ë..."
if [ -f "./setup-vpnusers.sh" ]; then
    ./setup-vpnusers.sh
else
    log_warn "setup-vpnusers.shÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"
    log_info "ÏàòÎèôÏúºÎ°ú Ïã§ÌñâÌïòÏÑ∏Ïöî: sudo ./setup-vpnusers.sh"
fi

# ÏôÑÎ£å
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
log_success "VPN ÎèôÍ∏∞Ìôî ÏôÑÎ£å!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${BLUE}üìä ÏÑ§Ï†ïÎêú VPN:${NC}"
wg show interfaces | tr ' ' '\n' | nl
echo ""
echo -e "${GREEN}‚úÖ ÏÇ¨Ïö©Î≤ï:${NC}"

# VPNÎ≥Ñ ÏÇ¨Ïö©ÏûêÎ™Ö ÌëúÏãú
for iface in $(wg show interfaces 2>/dev/null); do
    if [[ "$iface" =~ ^wg[0-9]+$ ]]; then
        NUM="${iface#wg}"
        USERNAME="vpn${NUM}"
    else
        USERNAME="vpn-${iface#wg-}"
    fi

    # APIÏóêÏÑú VPN IP Ï°∞Ìöå
    VPN_IP_INFO=$(echo "$VPN_LIST" | jq -r ".vpns[$NUM].public_ip // \"unknown\"")
    VPN_PUBLIC_IP=${VPN_IP_INFO:-"unknown"}

    echo "  vpn $USERNAME python crawl.py  # $VPN_PUBLIC_IP ($iface)"
done

echo ""
